<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================= 
    Introduction to Service Design and Engineering Laboratory
    Description: ANT build script for the session on JAXB and Dozer 
    Author: cdparra
    
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE'
       
       # The target "download-ivy" and "install-ivy" will download the ivy jar and place it in the "ivy" folder
       # 
-->
<project name="JAXBExample" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- PART 1: Ivy properties, download, installation and configuration -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- this targe will donwload ivy.jar if its inot in the "ivy" folder yet -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<!--
	================================= 
	target: install-ivy         
	this target is not necessary if you put ivy.jar in your ant lib directory
	if you already have ivy in your ant lib, you can simply remove this
	target and the dependency the 'init' target has on it
	================================= 
	-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!--
		try to load ivy here from local ivy dir, in case the user has not already dropped
		it into ant's lib dir (note that the latter copy will always take precedence).
		We will not fail as long as local lib dir exists (it may be empty) and
		ivy is in at least one of ant's lib dir or the local lib dir. 
		-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<!-- PART 2: General properties definitions -->
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />

	<!-- 
	================================= 
	target: resolve downloads the dependencies to your lib folder              
	=================================
	-->
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>


	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>


	<path id="run.path.id">
		<path refid="lib.path.id" />
		<fileset dir="${build.dir}">
			<include name="*.class" />
			<include name="**/*.class" />
			<exclude name="**/*Test*" />
		</fileset>
	</path>

	<!-- PART 3: compilation and execution targets for this session -->
	
	<!--Creates build directory-->
	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>
	
	<!--Sets up the initial enviroment-->
	<target name="clean">
		<echo message="Clean has been called" />
		<delete dir="${build.dir}" />
		<echo message="${build.dir} has been deleted" />
	</target>

	<!--Compiles the java classes and copies everything to the build directory-->
	<target name="compile" depends="init"> <!--, generate -->
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="startup">
		<echo message="===== RUNNING EVALUATION SCRIPT =====" />
	</target>
	
	<!-- Runs first instraction -->
	<target name="execute.1" depends="compile">
		<echo message="Running instruction 1: Print all people in detail..." />
		<java classname="XpathGetter" classpath="${build.dir}">
			<arg value="listAll"/>
		</java>
	</target>
	
	<!-- Runs second instraction -->
	<target name="execute.2" depends="compile">
		<echo message="Running instruction 2: Print the health profile of the person with ID = 5..." />
		<java classname="XpathGetter" classpath="${build.dir}">
			<arg value="getHP"/>
			<arg value="0005"/>
		</java>
	</target>
	
	<!-- Runs third instraction -->
	<target name="execute.3" depends="compile">
		<echo message="Running instruction 3: Print people with weight > 90..." />
		<java classname="XpathGetter" classpath="${build.dir}">
			<arg value="getByWeight"/>
			<arg value="90"/>
			<arg value=">"/>
		</java>
	</target>
	
	<!-- Runs firth instraction -->
	<target name="execute.4" depends="compile">
		<echo message="Running instruction 4: Marshal to XML..." />
		<java classname="Mymarshaller" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<!-- Runs fifth instraction -->
	<target name="execute.5" depends="compile">
		<echo message="Running instruction 5: Unmarshal from XML..." />
		<java classname="Myunmarshaller" classpath="${build.dir}">
			<classpath>
			<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<!-- Runs sixth instraction -->
	<target name="execute.6" depends="compile">
		<echo message="Running instruction 6: Marshal to JSON..." />
		<java classname="Jsonizer" classpath="${build.dir}">
			<classpath>
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<!-- Sets up the enviroment and runs all the instractions -->
	<target name="execute.evaluation" depends="compile, startup, execute.1, execute.2, execute.3, execute.4, execute.5, execute.6">
		<echo message="===== Evaluation terminated ====="/>
	</target>
	
</project>